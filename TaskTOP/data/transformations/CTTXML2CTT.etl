/*
pre {
  	var javaDate = new Native("java.util.Date");
  	javaDate.toString().println("Starting CTTXML2CTT transformation: ");
}

post {
 	var javaDate = new Native("java.util.Date");
  	javaDate.toString().println("Completed CTTXML2CTT transformation: ");
}
*/


// Transform all domains and set several attributes by obtaining 
// info from attributes and child nodes
rule CTTXML2CTTMM
    transform cttxml : CTTXML!t_TaskModel
    to ctt : CTT!TaskModel {
    
    //ad.e_task.recursiveXMLTeardown(null);
    // Set name of taskmodel.
    ctt.name = cttxml.a_NameTaskModelID;
    
    var child : CTT!Task = cttxml.e_task.recursiveXMLTeardown(null, ctt);
    
    // Make binary if necessary
    child.TaskToBinary(ctt);
}

operation CTTXML!t_Task recursiveXMLTeardown(parent : CTT!Task, taskModel : CTT!TaskModel) : CTT!Task{
    var subtask = self.e_subtask;
    var children = subtask<>null ? subtask.c_task : null;
    
    var result = self.getTaskImplementation();
    result.id   = self.a_Identifier;
    result.name = self.e_name != null ? self.e_name.text : "";
    result.iterative = self.a_Iterative.asBoolean();
    
    var time_performance = self.getTimePerformance();
    result.min = time_performance.get("min").round();
    result.max = time_performance.get("max").round();
    
    taskModel.tasks.add(result);
    
    // If there is a parent, add it.
    if(parent==null) {
        taskModel.root = result;
    }
    
    if(children != null and children.size() > 0) {
        
        var leftChild = children[0];
        result.operator = leftChild.getTemporalOperator();
    
	    for(c in children) {
	        if(c.isTypeOf(t_task)) {
	            var child : CTT!Task = c.recursiveXMLTeardown(result, taskModel);
	            result.subtasks.add(child);
	        }
	    }
    }
    
    // If the task is optional, we replace it with a choice task of which 
    // the left subtask is the optional task and the right subtask is a
    // null task.

    if(self.a_Optional.asBoolean()) {
        return handleOptional(result, taskModel);
    }
   
    // It the task is not optional, just return the task normally.
    return result;
}


// If a task is optional, we replace it with a choice operator and a null-task.
//
//                task_opt
//                 /    \
//  [task] =>     /      \
//               /        \
//            task --[]-- t_null
//    
operation handleOptional(task : CTT!Task, ctt : CTT!TaskModel) : CTT!Task {
    
    // Create the optional task that is the new parent of the original task.
    var optionalTask = new CTT!AbstractionTask();
    optionalTask.id = task.id + "_opt";
    optionalTask.iterative = false;
    optionalTask.operator = new CTT!ChoiceOperator();

    // Create the null-task.
    var nullTask = new CTT!NullTask();
    nullTask.id = task.id + "_null"; 
    
    // Add the original task and the null task to the new optional task.
    optionalTask.subtasks.add(task);
    optionalTask.subtasks.add(nullTask);
    
    // Add the optional task and the null task to the taskmodel tasks list.
    ctt.tasks.add(optionalTask);
    ctt.tasks.add(nullTask);
    
    // Return the optional task.
    return optionalTask;
}


/*
 * Create the right task implementation based on the category value of the task.
 */
operation CTTXML!t_Task getTaskImplementation() : CTT!Task {
    var category = self.a_Category;
    
    switch(category) {
        case "abstraction": return new CTT!AbstractionTask();
        case "interaction": return new CTT!InteractionTask();
        case "application": return new CTT!ApplicationTask();
        case "user":        return new CTT!UserTask();
    }
}

/*
 * Create the temporal operator instance based on the temporal operator of the task.
 */
operation CTTXML!t_Task getTemporalOperator() : CTT!TemporalOperator {
    var temporalOperator = self.e_TemporalOperator;
    var temporalOperatorName = temporalOperator<>null ? temporalOperator.a_name : "";
        
    switch(temporalOperatorName) {
        case "Choice":                  return new CTT!ChoiceOperator();
        case "OrderIndependence":       return new CTT!OrderIndependenceOperator();
        case "Interleaving":            return new CTT!InterleavingOperator();
        case "Synchronization":         return new CTT!SynchronizationOperator();
        case "Parallel":                return new CTT!ParallelOperator();
        case "Disabling":               return new CTT!DisablingOperator();
        case "SequentialEnablingInfo":  return new CTT!SequentialEnablingInfoOperator();
        case "SequentialEnabling":      return new CTT!SequentialEnablingOperator();
        case "SuspendResume":           return new CTT!SuspendResumeOperator();
        case "" :                       return null;
    }
}

operation CTTXML!t_Task getTimePerformance() : Map {
    var result : Map;
    result.put("min", -1);
    result.put("max", -1);
    result.put("avg", -1);
    
    if(self.e_TimePerformance<>null) {
        if(self.e_TimePerformance.e_Min<>null) 
            result.put("min", self.e_TimePerformance.e_Min.text.asReal());
        if(self.e_TimePerformance.e_Max<>null) 
            result.put("max", self.e_TimePerformance.e_Max.text.asReal());
        if(self.e_TimePerformance.e_Average<>null) 
            result.put("avg", self.e_TimePerformance.e_Average.text.asReal());
    }
    
    return result;
}

/**
 * Convert the taskmodel to a binary taskmodel.
 * We iterate over all the tasks in the task model and check if the task has
 * more than two subtasks. If this is the case, we create a new task and
 * that replaces the subtasks exluding the first subtask. We repeat this 
 * until all tasks have exactly null or two subtasks.
 *
 * NOTE: The subtasks of a task must share the same temporal 
 *       operator! (i.e. it must be a priority tree)
 *
 *                        t_0
 *                       /   \
 *      t_0             /     \
 *     / | \           /       \ 
 *    /  |  \    =>  t_1      t_0_b
 *   /   |   \                /   \     
 * t_1  t_2  t_3             /     \    
 *                          /       \   
 *                        t_2       t_3
 */
operation CTT!Task TaskToBinary(taskModel : CTT!TaskModel){
    if(self.subtasks.size()>2){
        self.id.println("Splitting:\t");
    
        var newTask = new CTT!AbstractionTask();
        newTask.name = self.name + "_b";
        newTask.id = self.id + "_b";
        newTask.iterative = false;
        newTask.operator = self.operator.createInstance();

        var subset2 := self.subtasks.excluding(self.subtasks.first());
    
        newTask.parent = self;
        newTask.subtasks := subset2;
    
        self.subtasks.removeAll(subset2);
        self.subtasks.add(newTask);
        
        taskModel.tasks.add(newTask);
    } 
    
    for(child in self.subtasks){
        child.TaskToBinary(taskModel);
    }
}

operation CTT!TemporalOperator createInstance() : CTT!TemporalOperator {
    switch(self.type().name) {
        case "ChoiceOperator":                  return new CTT!ChoiceOperator();
        case "OrderIndependenceOperator":       return new CTT!OrderIndependenceOperator();
        case "InterleavingOperator":            return new CTT!InterleavingOperator();
        case "SynchronizationOperator":         return new CTT!SynchronizationOperator();
        case "ParallelOperator":                return new CTT!ParallelOperator();
        case "DisablingOperator":               return new CTT!DisablingOperator();
        case "SequentialEnablingInfoOperator":  return new CTT!SequentialEnablingInfoOperator();
        case "SequentialEnablingOperator":      return new CTT!SequentialEnablingOperator();
        case "SuspendResumeOperator":           return new CTT!SuspendResumeOperator();
    }
}

